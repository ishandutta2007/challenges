/*

Challenge

Write a program to compute the the first N (<= 10^3) digits of e.

Your program should take an integer N as input.

Input:

100

Output:

2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427

Input:

7

Output:

2.718282

Input:

1000

Output:

2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251019011573834187930702154089149934884167509244761460668082264800168477411853742345442437107539077744992069551702761838606261331384583000752044933826560297606737113200709328709127443747047230696977209310141692836819025515108657463772111252389784425056953696770785449969967946864454905987931636889230098793127736178215424999229576351482208269895193668033182528869398496465105820939239829488793320362509443117301238197068416140397019837679320683282376464804295311802328782509819455815301756717361332069811250996181881593041690351598888519345807273866738589422879228499892086805825749279610484198444363463244968487560233624827041978623209002160990235304369941849146314093431738143640546253152096183690888707016768396424378140592714563549061303107208510383750510115747704171898610687396965521267154688957035035

Shortest solution wins!


*/

package main

import (
	"math/big"
)

func main() {
	const ex7 = "2.718282"
	const ex100 = "2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427"
	const ex1000 = "2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251019011573834187930702154089149934884167509244761460668082264800168477411853742345442437107539077744992069551702761838606261331384583000752044933826560297606737113200709328709127443747047230696977209310141692836819025515108657463772111252389784425056953696770785449969967946864454905987931636889230098793127736178215424999229576351482208269895193668033182528869398496465105820939239829488793320362509443117301238197068416140397019837679320683282376464804295311802328782509819455815301756717361332069811250996181881593041690351598888519345807273866738589422879228499892086805825749279610484198444363463244968487560233624827041978623209002160990235304369941849146314093431738143640546253152096183690888707016768396424378140592714563549061303107208510383750510115747704171898610687396965521267154688957035035"
	assert(e(7) == ex7)
	assert(e(100) == ex100)
	assert(e(1000) == ex1000)
}

func assert(x bool) {
	if !x {
		panic("assertion failed")
	}
}

func e(n int) string {
	r := new(big.Rat)
	y := big.NewRat(1, 1)
	for i := 0; i < n+50; i++ {
		if i >= 2 {
			y.Mul(y, big.NewRat(int64(i), 1))
		}
		z := new(big.Rat)
		z.Set(y)
		z.Inv(z)

		r.Add(r, z)
	}
	return r.FloatString(n - 1)
}
