/*

In this task you will be given A (less than 10000 digits long) and B (less than 2^64), and you will need to compute the last digit of (A 路 A 路 A 路 ... 路 A (B times)).

The inputs A and B are given in a single line separated by a blank; the inputs are terminated by EOF.

Input

34543232321323243242434544533445343432434311112223454323232132324324243454453344534343243431111222345432323213232432424345445334453434324343111122234543232321323243242434544533445343432434311112223454323232132324324243454453344534343243431111222345432323213232432424345445334453434324343111122234543232321323243242434544533445343432434311112223454323232132324324243454453344534343243431111222 22337254775808
38758436543765743875437656358764347568437658743658743454354645645543532487548758475847684756897548758457843758437584758478574857438758436587436587436587643875643856783478743658743658764387564387564378658437658743658743687564387564387564765746576475647564756475465746574675647654765476547534587545689475689748574385743765874585743857843765893748643587438957458754376543265874387564384764367584375874758943267632487564357 54545454123
6777744348435743587643756438765436574587564354375674365645643675 23232
3875843654376574357 54545454

Output

6
3
5
9

Constraints

    Don't use any inbuilt function or overloaded operators to compute AB (you don't really need to compute that at all).
    Shortest solution wins!

*/

package main

import (
	"math/big"
)

func main() {
	assert(lastdigit("34543232321323243242434544533445343432434311112223454323232132324324243454453344534343243431111222345432323213232432424345445334453434324343111122234543232321323243242434544533445343432434311112223454323232132324324243454453344534343243431111222345432323213232432424345445334453434324343111122234543232321323243242434544533445343432434311112223454323232132324324243454453344534343243431111222", "22337254775808") == 6)
	assert(lastdigit("38758436543765743875437656358764347568437658743658743454354645645543532487548758475847684756897548758457843758437584758478574857438758436587436587436587643875643856783478743658743658764387564387564378658437658743658743687564387564387564765746576475647564756475465746574675647654765476547534587545689475689748574385743765874585743857843765893748643587438957458754376543265874387564384764367584375874758943267632487564357", "54545454123") == 3)
	assert(lastdigit("6777744348435743587643756438765436574587564354375674365645643675", "23232") == 5)
	assert(lastdigit("3875843654376574357", "54545454") == 9)
}

func assert(x bool) {
	if !x {
		panic("assertion failed")
	}
}

func lastdigit(a, b string) int {
	x := xint(a)
	y := xint(b)
	m := xint("10")
	x.Exp(x, y, m)
	return int(x.Int64())
}

func xint(s string) *big.Int {
	x := new(big.Int)
	x.SetString(s, 0)
	return x
}
