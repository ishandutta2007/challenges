#!/usr/bin/env python

"""

This task is about compressing and processing a sequence of conditionals.

In the game Keep Talking and Nobody Explodes, a bomb defuser must disarm a bomb with the help of instructions relayed by experts consulting a convoluted Bomb Defusal Manual. This challenge deals with the module "On the Subject of Wires", explained on page 5 of the manual. The defuser is presented with an array of colored wires. Only one of them is safe to cut -- the rest detonate the bomb.

Your code acts as the expert to determine which wire to cut based on the number and colors of the wires, as per the instructions in the manual reproduced under "Wire cutting rules".

Input: An ordered list or string of 3, 4, 5, or 6 wire colors, represented by uppercase letters:

B: Black
U: Blue
R: Red
W: White
Y: Yellow
Note that blue is U, not B.

The input also includes a bit (True/False or 0/1) for whether the last digit of the bomb's serial number is odd, a condition used in some rules.

You should not take the number of wires as a separate input, but derive it from the list or string of colors. You may have your list or string have a terminator element after the colors, perhaps if your language cannot tell how long it is. This terminator should be a fixed value that doesn't encode additional information.

Output: A number 1 through 6, indicating which wire to cut. This may not be zero-indexed.

Wire cutting rules: These rules are reproduced from page 5 of the defusal manual

3 wires:
  If there are no red wires, cut the second wire.
  Otherwise, if the last wire is white, cut the last wire.
  Otherwise, if there is more than one blue wire, cut the last blue wire.
  Otherwise, cut the last wire.

4 wires:
  If there is more than one red wire and the last digit of the serial number is odd, cut the last red wire.
  Otherwise, if the last wire is yellow and there are no red wires, cut the first wire.
  Otherwise, if there is exactly one blue wire, cut the first wire.
  Otherwise, if there is more than one yellow wire, cut the last wire.
  Otherwise, cut the second wire.

5 wires:
  If the last wire is black and the last digit of the serial number is odd, cut the fourth wire.
  Otherwise, if there is exactly one red wire and there is more than one yellow wire, cut the first wire.
  Otherwise, if there are no black wires, cut the second wire.
  Otherwise, cut the first wire.

6 wires:
  If there are no yellow wires and the last digit of the serial number is odd, cut the third wire.
  Otherwise, if there is exactly one yellow wire and there is more than one white wire, cut the fourth wire.
  Otherwise, if there are no red wires, cut the last wire.
  Otherwise, cut the fourth wire.
Reference solution (TIO)

This code is in Python.

def wire_to_cut(wires, serial_odd):
    'Return the index of the wire to cut, one-indexed. This is a number 1 to 6.
    wires: A list of 3 through 6 color characters from BURWY
    serial_odd: A Boolean for whether the last digit of the serial is odd.

    >>> wire_to_cut(['R', 'B', 'R', 'W'], True):
    3
    '
    num_wires = len(wires)
    last_wire = wires[-1]

    if num_wires == 3:
        if wires.count('R') == 0:
            return 2
        elif last_wire == 'W':
            return num_wires
        elif wires.count('U') > 1:
            # Last blue wire
            return ''.join(wires).rindex('U') + 1
        else:
            return num_wires

    elif num_wires == 4:
        if wires.count('R') > 1 and serial_odd:
            # Last red wire
            return ''.join(wires).rindex('R') + 1
        elif last_wire == 'Y' and wires.count('R') == 0:
            return 1
        elif wires.count('U') == 1:
            return 1
        elif wires.count('Y') > 1:
            return num_wires
        else:
            return 2

    elif num_wires == 5:
        if last_wire == 'B' and serial_odd:
            return 4
        elif wires.count('R') == 1 and wires.count('Y') > 1:
            return 1
        elif wires.count('B') == 0:
            return 2
        else:
            return 1

    elif num_wires == 6:
        if wires.count('Y') == 0 and serial_odd:
            return 3
        elif wires.count('Y') == 1 and wires.count('W') > 1:
            return 4
        elif wires.count('R') == 0:
            return num_wires
        else:
            return 4

    else:
        raise ValueError("Wrong number of wires.")
Test cases

As (input, output) where input = (wires, odd_serial).

((['B', 'B', 'B'], False), 2)
((['B', 'B', 'Y'], True), 2)
((['B', 'R', 'R'], False), 3)
((['B', 'W', 'U'], True), 2)
((['U', 'B', 'B'], True), 2)
((['U', 'B', 'Y'], False), 2)
((['U', 'U', 'R'], True), 2)
((['U', 'U', 'U'], False), 2)
((['U', 'R', 'R'], True), 3)
((['U', 'Y', 'Y'], False), 2)
((['R', 'B', 'U'], False), 3)
((['R', 'B', 'Y'], False), 3)
((['R', 'U', 'B'], False), 3)
((['R', 'R', 'U'], False), 3)
((['R', 'W', 'U'], True), 3)
((['W', 'B', 'W'], False), 2)
((['W', 'B', 'Y'], True), 2)
((['W', 'R', 'U'], True), 3)
((['W', 'W', 'B'], True), 2)
((['W', 'W', 'U'], True), 2)
((['W', 'Y', 'W'], True), 2)
((['Y', 'U', 'B'], True), 2)
((['Y', 'U', 'W'], False), 2)
((['Y', 'R', 'U'], False), 3)
((['Y', 'Y', 'B'], False), 2)
((['Y', 'Y', 'B'], True), 2)
((['B', 'B', 'U', 'U'], True), 2)
((['B', 'B', 'R', 'W'], True), 2)
((['B', 'B', 'R', 'Y'], True), 2)
((['B', 'U', 'B', 'R'], False), 1)
((['B', 'U', 'R', 'W'], False), 1)
((['B', 'U', 'W', 'R'], True), 1)
((['B', 'U', 'W', 'Y'], True), 1)
((['B', 'U', 'Y', 'R'], False), 1)
((['B', 'R', 'U', 'B'], True), 1)
((['B', 'R', 'R', 'B'], True), 3)
((['B', 'R', 'Y', 'W'], True), 2)
((['B', 'R', 'Y', 'Y'], True), 4)
((['B', 'W', 'R', 'U'], True), 1)
((['B', 'W', 'Y', 'B'], False), 2)
((['B', 'Y', 'R', 'U'], False), 1)
((['B', 'Y', 'R', 'R'], False), 2)
((['U', 'B', 'R', 'W'], False), 1)
((['U', 'B', 'W', 'Y'], False), 1)
((['U', 'B', 'Y', 'W'], True), 1)
((['U', 'U', 'R', 'W'], True), 2)
((['U', 'U', 'W', 'B'], False), 2)
((['U', 'U', 'W', 'Y'], False), 1)
((['U', 'R', 'B', 'U'], False), 2)
((['U', 'R', 'Y', 'U'], True), 2)
((['U', 'R', 'Y', 'W'], False), 1)
((['U', 'R', 'Y', 'Y'], False), 1)
((['U', 'W', 'U', 'Y'], False), 1)
((['U', 'W', 'W', 'W'], False), 1)
((['U', 'Y', 'B', 'B'], False), 1)
((['U', 'Y', 'B', 'W'], True), 1)
((['U', 'Y', 'U', 'R'], True), 2)
((['U', 'Y', 'R', 'W'], False), 1)
((['R', 'B', 'R', 'R'], False), 2)
((['R', 'U', 'B', 'B'], True), 1)
((['R', 'U', 'W', 'B'], False), 1)
((['R', 'R', 'B', 'R'], True), 4)
((['R', 'R', 'W', 'R'], True), 4)
((['R', 'R', 'W', 'W'], True), 2)
((['R', 'R', 'Y', 'Y'], False), 4)
((['R', 'R', 'Y', 'Y'], True), 2)
((['R', 'W', 'U', 'W'], True), 1)
((['R', 'W', 'W', 'U'], False), 1)
((['R', 'W', 'Y', 'W'], False), 2)
((['R', 'Y', 'R', 'U'], False), 1)
((['R', 'Y', 'Y', 'W'], False), 4)
((['W', 'B', 'U', 'R'], False), 1)
((['W', 'B', 'U', 'Y'], False), 1)
((['W', 'U', 'B', 'Y'], False), 1)
((['W', 'U', 'U', 'W'], True), 2)
((['W', 'U', 'R', 'W'], False), 1)
((['W', 'W', 'R', 'U'], False), 1)
((['W', 'Y', 'R', 'R'], False), 2)
((['W', 'Y', 'Y', 'U'], False), 1)
((['W', 'Y', 'Y', 'Y'], True), 1)
((['Y', 'B', 'B', 'R'], True), 2)
((['Y', 'B', 'W', 'U'], False), 1)
((['Y', 'B', 'W', 'W'], False), 2)
((['Y', 'U', 'R', 'Y'], False), 1)
((['Y', 'R', 'B', 'R'], False), 2)
((['Y', 'R', 'U', 'R'], True), 4)
((['Y', 'R', 'R', 'Y'], False), 4)
((['Y', 'R', 'W', 'U'], False), 1)
((['Y', 'R', 'Y', 'B'], False), 4)
((['Y', 'R', 'Y', 'B'], True), 4)
((['Y', 'W', 'U', 'B'], False), 1)
((['Y', 'W', 'R', 'R'], True), 4)
((['Y', 'W', 'W', 'R'], True), 2)
((['Y', 'W', 'W', 'Y'], True), 1)
((['Y', 'W', 'Y', 'U'], False), 1)
((['Y', 'Y', 'B', 'B'], True), 4)
((['Y', 'Y', 'R', 'R'], True), 4)
((['B', 'B', 'B', 'R', 'W'], False), 1)
((['B', 'B', 'R', 'R', 'W'], False), 1)
((['B', 'U', 'B', 'W', 'U'], True), 1)
((['B', 'R', 'R', 'U', 'R'], True), 1)
((['B', 'R', 'R', 'W', 'W'], False), 1)
((['B', 'R', 'Y', 'Y', 'R'], False), 1)
((['B', 'W', 'B', 'W', 'B'], False), 1)
((['B', 'W', 'U', 'B', 'U'], True), 1)
((['B', 'W', 'R', 'U', 'W'], True), 1)
((['B', 'W', 'R', 'W', 'B'], False), 1)
((['B', 'W', 'W', 'R', 'U'], False), 1)
((['B', 'W', 'W', 'R', 'U'], True), 1)
((['B', 'W', 'W', 'W', 'B'], False), 1)
((['B', 'W', 'Y', 'R', 'Y'], True), 1)
((['B', 'Y', 'B', 'W', 'U'], True), 1)
((['B', 'Y', 'U', 'W', 'B'], True), 4)
((['B', 'Y', 'U', 'Y', 'W'], False), 1)
((['U', 'B', 'R', 'W', 'Y'], False), 1)
((['U', 'B', 'W', 'B', 'R'], False), 1)
((['U', 'B', 'W', 'B', 'W'], False), 1)
((['U', 'B', 'W', 'Y', 'R'], False), 1)
((['U', 'B', 'Y', 'U', 'B'], True), 4)
((['U', 'B', 'Y', 'U', 'Y'], False), 1)
((['U', 'B', 'Y', 'R', 'W'], False), 1)
((['U', 'U', 'B', 'B', 'U'], True), 1)
((['U', 'U', 'R', 'U', 'W'], True), 2)
((['U', 'U', 'Y', 'U', 'R'], True), 2)
((['U', 'U', 'Y', 'U', 'W'], False), 2)
((['U', 'R', 'B', 'Y', 'Y'], False), 1)
((['U', 'R', 'U', 'B', 'Y'], False), 1)
((['U', 'R', 'W', 'W', 'B'], False), 1)
((['U', 'R', 'Y', 'Y', 'W'], False), 1)
((['U', 'W', 'B', 'U', 'B'], True), 4)
((['U', 'W', 'U', 'U', 'B'], True), 4)
((['U', 'W', 'R', 'U', 'Y'], True), 2)
((['U', 'W', 'R', 'R', 'R'], True), 2)
((['U', 'W', 'R', 'R', 'W'], False), 2)
((['U', 'W', 'R', 'Y', 'W'], True), 2)
((['U', 'W', 'W', 'Y', 'R'], True), 2)
((['U', 'Y', 'B', 'W', 'Y'], False), 1)
((['U', 'Y', 'U', 'R', 'W'], True), 2)
((['U', 'Y', 'R', 'R', 'U'], False), 2)
((['U', 'Y', 'Y', 'B', 'W'], False), 1)
((['U', 'Y', 'Y', 'R', 'B'], True), 4)
((['U', 'Y', 'Y', 'Y', 'R'], False), 1)
((['R', 'B', 'B', 'W', 'U'], False), 1)
((['R', 'B', 'U', 'B', 'Y'], False), 1)
((['R', 'B', 'R', 'R', 'Y'], True), 1)
((['R', 'B', 'W', 'W', 'R'], True), 1)
((['R', 'B', 'W', 'W', 'W'], False), 1)
((['R', 'U', 'U', 'B', 'U'], True), 1)
((['R', 'U', 'U', 'R', 'Y'], False), 2)
((['R', 'U', 'R', 'B', 'W'], False), 1)
((['R', 'U', 'R', 'Y', 'R'], True), 2)
((['R', 'R', 'B', 'U', 'U'], True), 1)
((['R', 'R', 'B', 'R', 'W'], True), 1)
((['R', 'R', 'W', 'B', 'Y'], True), 1)
((['R', 'R', 'Y', 'Y', 'B'], False), 1)
((['R', 'W', 'U', 'Y', 'W'], False), 2)
((['R', 'W', 'Y', 'B', 'U'], True), 1)
((['R', 'Y', 'B', 'U', 'U'], True), 1)
((['R', 'Y', 'B', 'R', 'Y'], True), 1)
((['R', 'Y', 'B', 'W', 'R'], True), 1)
((['R', 'Y', 'R', 'U', 'U'], False), 2)
((['R', 'Y', 'Y', 'W', 'B'], True), 4)
((['R', 'Y', 'Y', 'W', 'W'], True), 1)
((['W', 'B', 'R', 'R', 'R'], False), 1)
((['W', 'U', 'U', 'U', 'B'], False), 1)
((['W', 'U', 'U', 'R', 'B'], False), 1)
((['W', 'U', 'R', 'B', 'R'], False), 1)
((['W', 'U', 'W', 'W', 'R'], True), 2)
((['W', 'U', 'Y', 'R', 'W'], True), 2)
((['W', 'R', 'R', 'B', 'Y'], True), 1)
((['W', 'W', 'U', 'B', 'W'], True), 1)
((['W', 'W', 'U', 'W', 'R'], False), 2)
((['W', 'W', 'W', 'W', 'B'], False), 1)
((['W', 'W', 'W', 'W', 'W'], False), 2)
((['W', 'W', 'Y', 'W', 'U'], True), 2)
((['W', 'W', 'Y', 'Y', 'R'], False), 1)
((['W', 'Y', 'R', 'B', 'B'], False), 1)
((['W', 'Y', 'W', 'B', 'W'], True), 1)
((['W', 'Y', 'Y', 'W', 'U'], True), 2)
((['Y', 'B', 'U', 'R', 'B'], True), 4)
((['Y', 'B', 'U', 'Y', 'R'], False), 1)
((['Y', 'B', 'R', 'Y', 'Y'], False), 1)
((['Y', 'B', 'W', 'U', 'B'], True), 4)
((['Y', 'B', 'Y', 'R', 'R'], False), 1)
((['Y', 'U', 'U', 'U', 'U'], False), 2)
((['Y', 'U', 'R', 'W', 'B'], False), 1)
((['Y', 'U', 'W', 'U', 'Y'], True), 2)
((['Y', 'U', 'Y', 'Y', 'W'], False), 2)
((['Y', 'R', 'R', 'R', 'Y'], False), 2)
((['Y', 'R', 'R', 'Y', 'R'], False), 2)
((['Y', 'R', 'W', 'W', 'U'], False), 2)
((['Y', 'W', 'B', 'R', 'U'], True), 1)
((['Y', 'W', 'U', 'U', 'W'], True), 2)
((['Y', 'W', 'U', 'R', 'B'], False), 1)
((['Y', 'W', 'R', 'R', 'R'], True), 2)
((['Y', 'W', 'R', 'Y', 'R'], False), 2)
((['Y', 'W', 'W', 'B', 'U'], True), 1)
((['Y', 'W', 'W', 'W', 'B'], False), 1)
((['Y', 'Y', 'R', 'Y', 'U'], False), 1)
((['B', 'B', 'B', 'B', 'R', 'U'], False), 4)
((['B', 'B', 'B', 'R', 'R', 'R'], True), 3)
((['B', 'B', 'R', 'U', 'W', 'Y'], False), 4)
((['B', 'B', 'R', 'R', 'R', 'B'], True), 3)
((['B', 'B', 'W', 'U', 'B', 'B'], False), 6)
((['B', 'B', 'W', 'U', 'B', 'U'], True), 3)
((['B', 'B', 'W', 'W', 'B', 'R'], True), 3)
((['B', 'B', 'Y', 'Y', 'W', 'R'], False), 4)
((['B', 'U', 'B', 'B', 'W', 'U'], False), 6)
((['B', 'U', 'U', 'W', 'W', 'Y'], True), 4)
((['B', 'U', 'U', 'Y', 'Y', 'R'], False), 4)
((['B', 'U', 'R', 'R', 'B', 'Y'], True), 4)
((['B', 'U', 'W', 'B', 'W', 'Y'], True), 4)
((['B', 'U', 'Y', 'R', 'R', 'R'], False), 4)
((['B', 'U', 'Y', 'R', 'Y', 'B'], False), 4)
((['B', 'R', 'U', 'B', 'U', 'B'], True), 3)
((['B', 'R', 'R', 'R', 'Y', 'B'], True), 4)
((['B', 'R', 'R', 'W', 'B', 'R'], True), 3)
((['B', 'R', 'Y', 'B', 'R', 'W'], False), 4)
((['B', 'R', 'Y', 'W', 'B', 'Y'], False), 4)
((['B', 'W', 'U', 'Y', 'U', 'W'], False), 4)
((['B', 'W', 'R', 'U', 'Y', 'Y'], True), 4)
((['B', 'W', 'R', 'Y', 'U', 'W'], False), 4)
((['B', 'W', 'W', 'Y', 'U', 'R'], False), 4)
((['B', 'W', 'Y', 'R', 'B', 'R'], False), 4)
((['B', 'W', 'Y', 'W', 'Y', 'U'], False), 6)
((['B', 'Y', 'B', 'R', 'B', 'R'], True), 4)
((['B', 'Y', 'U', 'B', 'Y', 'U'], False), 6)
((['B', 'Y', 'R', 'U', 'Y', 'U'], True), 4)
((['B', 'Y', 'R', 'R', 'W', 'W'], True), 4)
((['B', 'Y', 'W', 'W', 'U', 'B'], True), 4)
((['U', 'B', 'B', 'W', 'R', 'R'], True), 3)
((['U', 'B', 'W', 'B', 'W', 'U'], False), 6)
((['U', 'B', 'Y', 'U', 'B', 'R'], False), 4)
((['U', 'U', 'B', 'B', 'W', 'Y'], False), 6)
((['U', 'U', 'B', 'W', 'B', 'B'], True), 3)
((['U', 'U', 'B', 'Y', 'Y', 'Y'], False), 6)
((['U', 'U', 'U', 'B', 'U', 'Y'], True), 6)
((['U', 'U', 'U', 'B', 'Y', 'Y'], False), 6)
((['U', 'U', 'U', 'Y', 'W', 'B'], False), 6)
((['U', 'U', 'R', 'U', 'W', 'R'], True), 3)
((['U', 'U', 'Y', 'W', 'W', 'U'], True), 4)
((['U', 'U', 'Y', 'Y', 'B', 'R'], False), 4)
((['U', 'R', 'B', 'R', 'Y', 'R'], False), 4)
((['U', 'R', 'B', 'R', 'Y', 'Y'], True), 4)
((['U', 'R', 'R', 'B', 'U', 'R'], False), 4)
((['U', 'R', 'W', 'B', 'B', 'B'], False), 4)
((['U', 'R', 'W', 'Y', 'U', 'U'], True), 4)
((['U', 'R', 'Y', 'U', 'B', 'Y'], True), 4)
((['U', 'W', 'B', 'B', 'B', 'U'], False), 6)
((['U', 'W', 'B', 'R', 'W', 'Y'], True), 4)
((['U', 'W', 'R', 'R', 'B', 'R'], True), 3)
((['U', 'W', 'R', 'W', 'Y', 'B'], True), 4)
((['U', 'W', 'W', 'B', 'Y', 'R'], True), 4)
((['U', 'W', 'W', 'W', 'R', 'W'], False), 4)
((['U', 'W', 'W', 'W', 'R', 'Y'], True), 4)
((['U', 'Y', 'B', 'Y', 'R', 'W'], False), 4)
((['U', 'Y', 'U', 'R', 'U', 'Y'], False), 4)
((['U', 'Y', 'U', 'R', 'Y', 'W'], False), 4)
((['U', 'Y', 'R', 'W', 'U', 'U'], False), 4)
((['U', 'Y', 'R', 'Y', 'Y', 'U'], False), 4)
((['U', 'Y', 'Y', 'B', 'W', 'Y'], True), 6)
((['U', 'Y', 'Y', 'R', 'R', 'Y'], True), 4)
((['R', 'B', 'B', 'U', 'U', 'W'], False), 4)
((['R', 'B', 'B', 'Y', 'R', 'U'], False), 4)
((['R', 'B', 'R', 'Y', 'B', 'R'], True), 4)
((['R', 'B', 'W', 'B', 'R', 'B'], False), 4)
((['R', 'B', 'W', 'W', 'U', 'U'], True), 3)
((['R', 'B', 'Y', 'R', 'Y', 'W'], False), 4)
((['R', 'U', 'B', 'B', 'B', 'W'], True), 3)
((['R', 'U', 'B', 'B', 'R', 'W'], False), 4)
((['R', 'U', 'U', 'U', 'R', 'Y'], False), 4)
((['R', 'U', 'U', 'Y', 'U', 'W'], False), 4)
((['R', 'U', 'R', 'W', 'W', 'R'], False), 4)
((['R', 'U', 'R', 'W', 'W', 'W'], False), 4)
((['R', 'U', 'R', 'Y', 'R', 'U'], False), 4)
((['R', 'U', 'W', 'U', 'Y', 'W'], False), 4)
((['R', 'U', 'W', 'W', 'Y', 'Y'], True), 4)
((['R', 'U', 'W', 'Y', 'W', 'Y'], False), 4)
((['R', 'R', 'B', 'W', 'U', 'W'], False), 4)
((['R', 'R', 'B', 'W', 'W', 'U'], True), 3)
((['R', 'R', 'U', 'B', 'B', 'U'], False), 4)
((['R', 'R', 'U', 'W', 'R', 'B'], True), 3)
((['R', 'R', 'U', 'Y', 'Y', 'R'], False), 4)
((['R', 'R', 'W', 'U', 'W', 'W'], True), 3)
((['R', 'R', 'W', 'W', 'B', 'W'], False), 4)
((['R', 'R', 'Y', 'U', 'B', 'W'], False), 4)
((['R', 'R', 'Y', 'Y', 'U', 'Y'], True), 4)
((['R', 'W', 'B', 'Y', 'R', 'B'], True), 4)
((['R', 'W', 'U', 'B', 'U', 'R'], True), 3)
((['R', 'W', 'U', 'Y', 'U', 'Y'], False), 4)
((['R', 'W', 'W', 'U', 'B', 'Y'], True), 4)
((['R', 'W', 'Y', 'B', 'W', 'Y'], False), 4)
((['R', 'W', 'Y', 'U', 'B', 'Y'], False), 4)
((['R', 'W', 'Y', 'W', 'U', 'U'], False), 4)
((['R', 'Y', 'B', 'W', 'W', 'R'], False), 4)
((['R', 'Y', 'U', 'R', 'B', 'W'], False), 4)
((['R', 'Y', 'U', 'Y', 'R', 'U'], False), 4)
((['R', 'Y', 'R', 'R', 'U', 'R'], True), 4)
((['R', 'Y', 'Y', 'B', 'U', 'R'], False), 4)
((['R', 'Y', 'Y', 'B', 'R', 'W'], False), 4)
((['R', 'Y', 'Y', 'B', 'Y', 'R'], True), 4)
((['R', 'Y', 'Y', 'Y', 'Y', 'R'], False), 4)
((['W', 'B', 'B', 'B', 'R', 'U'], True), 3)
((['W', 'B', 'B', 'R', 'Y', 'Y'], False), 4)
((['W', 'B', 'B', 'Y', 'Y', 'R'], False), 4)
((['W', 'B', 'R', 'R', 'U', 'U'], True), 3)
((['W', 'B', 'R', 'W', 'R', 'Y'], False), 4)
((['W', 'B', 'Y', 'U', 'Y', 'Y'], True), 6)
((['W', 'B', 'Y', 'R', 'R', 'U'], False), 4)
((['W', 'U', 'U', 'B', 'R', 'W'], True), 3)
((['W', 'U', 'U', 'R', 'W', 'R'], False), 4)
((['W', 'U', 'R', 'U', 'B', 'W'], True), 3)
((['W', 'U', 'R', 'U', 'U', 'Y'], True), 4)
((['W', 'U', 'R', 'U', 'R', 'W'], True), 3)
((['W', 'U', 'R', 'U', 'R', 'Y'], False), 4)
((['W', 'U', 'R', 'R', 'U', 'R'], False), 4)
((['W', 'U', 'W', 'U', 'U', 'Y'], True), 4)
((['W', 'U', 'W', 'Y', 'B', 'R'], True), 4)
((['W', 'U', 'Y', 'R', 'B', 'W'], True), 4)
((['W', 'R', 'B', 'B', 'U', 'W'], False), 4)
((['W', 'R', 'B', 'B', 'U', 'Y'], True), 4)
((['W', 'R', 'B', 'Y', 'W', 'R'], False), 4)
((['W', 'R', 'U', 'B', 'W', 'B'], True), 3)
((['W', 'R', 'U', 'Y', 'Y', 'Y'], True), 4)
((['W', 'R', 'R', 'B', 'W', 'Y'], False), 4)
((['W', 'R', 'R', 'R', 'U', 'B'], False), 4)
((['W', 'R', 'R', 'W', 'W', 'Y'], True), 4)
((['W', 'R', 'W', 'B', 'B', 'W'], True), 3)
((['W', 'R', 'Y', 'U', 'B', 'B'], True), 4)
((['W', 'R', 'Y', 'R', 'R', 'R'], True), 4)
((['W', 'W', 'B', 'R', 'R', 'Y'], True), 4)
((['W', 'W', 'B', 'Y', 'U', 'U'], True), 4)
((['W', 'W', 'U', 'W', 'R', 'U'], True), 3)
((['W', 'W', 'U', 'W', 'Y', 'B'], True), 4)
((['W', 'W', 'U', 'Y', 'Y', 'B'], True), 6)
((['W', 'W', 'R', 'R', 'R', 'W'], True), 3)
((['W', 'W', 'W', 'U', 'W', 'Y'], False), 4)
((['W', 'Y', 'R', 'B', 'W', 'U'], False), 4)
((['W', 'Y', 'R', 'W', 'U', 'W'], True), 4)
((['W', 'Y', 'R', 'Y', 'R', 'B'], True), 4)
((['W', 'Y', 'W', 'U', 'U', 'B'], True), 4)
((['W', 'Y', 'Y', 'Y', 'R', 'B'], False), 4)
((['Y', 'B', 'B', 'R', 'W', 'R'], False), 4)
((['Y', 'B', 'R', 'R', 'U', 'B'], True), 4)
((['Y', 'B', 'R', 'Y', 'W', 'R'], False), 4)
((['Y', 'B', 'W', 'Y', 'B', 'R'], True), 4)
((['Y', 'B', 'Y', 'W', 'W', 'Y'], True), 6)
((['Y', 'U', 'B', 'U', 'B', 'U'], False), 6)
((['Y', 'U', 'B', 'U', 'U', 'U'], False), 6)
((['Y', 'U', 'B', 'U', 'Y', 'Y'], False), 6)
((['Y', 'U', 'B', 'W', 'R', 'Y'], True), 4)
((['Y', 'U', 'U', 'B', 'R', 'W'], False), 4)
((['Y', 'U', 'R', 'B', 'W', 'U'], False), 4)
((['Y', 'U', 'Y', 'R', 'Y', 'Y'], True), 4)
((['Y', 'R', 'B', 'B', 'U', 'R'], False), 4)
((['Y', 'R', 'B', 'B', 'U', 'W'], True), 4)
((['Y', 'R', 'B', 'B', 'R', 'B'], False), 4)
((['Y', 'R', 'B', 'R', 'B', 'W'], False), 4)
((['Y', 'R', 'U', 'U', 'U', 'R'], False), 4)
((['Y', 'R', 'R', 'U', 'B', 'W'], True), 4)
((['Y', 'R', 'R', 'W', 'B', 'W'], True), 4)
((['Y', 'R', 'R', 'W', 'U', 'W'], False), 4)
((['Y', 'R', 'W', 'B', 'Y', 'B'], True), 4)
((['Y', 'R', 'W', 'Y', 'Y', 'R'], False), 4)
((['Y', 'R', 'Y', 'B', 'Y', 'B'], False), 4)
((['Y', 'W', 'B', 'R', 'W', 'W'], False), 4)
((['Y', 'W', 'U', 'R', 'W', 'W'], False), 4)
((['Y', 'W', 'R', 'B', 'Y', 'U'], False), 4)
((['Y', 'W', 'R', 'U', 'U', 'Y'], False), 4)
((['Y', 'W', 'R', 'R', 'W', 'B'], True), 4)
((['Y', 'W', 'W', 'U', 'Y', 'W'], True), 6)
((['Y', 'W', 'Y', 'U', 'U', 'U'], True), 6)
((['Y', 'W', 'Y', 'R', 'B', 'B'], False), 4)
((['Y', 'Y', 'B', 'B', 'B', 'B'], True), 6)
((['Y', 'Y', 'B', 'B', 'W', 'R'], True), 4)
((['Y', 'Y', 'B', 'R', 'W', 'Y'], False), 4)
((['Y', 'Y', 'B', 'Y', 'Y', 'B'], False), 6)
((['Y', 'Y', 'R', 'B', 'Y', 'W'], False), 4)
((['Y', 'Y', 'R', 'Y', 'U', 'W'], True), 4)

This Python code generates all 39000 possible inputs (TIO).

import itertools

def generate_all_inputs():
    colors = ['B', 'U', 'R', 'W', 'Y']

    for num_wires in [3, 4, 5, 6]:
        for wires in itertools.product(colors, repeat=num_wires):
            for serial_odd in [False, True]:
                yield (list(wires), serial_odd)

"""

def wirecut(wires, serial_odd):
    num_wires = len(wires)
    last_wire = wires[-1]

    if num_wires == 3:
        if wires.count('R') == 0:
            return 2
        elif last_wire == 'W':
            return num_wires
        elif wires.count('U') > 1:
            return ''.join(wires).rindex('U') + 1
        else:
            return num_wires
    elif num_wires == 4:
        if wires.count('R') > 1 and serial_odd:
            return ''.join(wires).rindex('R') + 1
        elif last_wire == 'Y' and wires.count('R') == 0:
            return 1
        elif wires.count('U') == 1:
            return 1
        elif wires.count('Y') > 1:
            return num_wires
        else:
            return 2
    elif num_wires == 5:
        if last_wire == 'B' and serial_odd:
            return 4
        elif wires.count('R') == 1 and wires.count('Y') > 1:
            return 1
        elif wires.count('B') == 0:
            return 2
        else:
            return 1
    elif num_wires == 6:
        if wires.count('Y') == 0 and serial_odd:
            return 3
        elif wires.count('Y') == 1 and wires.count('W') > 1:
            return 4
        elif wires.count('R') == 0:
            return num_wires
        else:
            return 4
    else:
        raise ValueError("Wrong number of wires.")

assert(wirecut(['B', 'B', 'B'], False) == 2)
assert(wirecut(['B', 'B', 'Y'], True) == 2)
assert(wirecut(['B', 'R', 'R'], False) == 3)
assert(wirecut(['B', 'W', 'U'], True) == 2)
assert(wirecut(['U', 'B', 'B'], True) == 2)
assert(wirecut(['U', 'B', 'Y'], False) == 2)
assert(wirecut(['U', 'U', 'R'], True) == 2)
assert(wirecut(['U', 'U', 'U'], False) == 2)
assert(wirecut(['U', 'R', 'R'], True) == 3)
assert(wirecut(['U', 'Y', 'Y'], False) == 2)
assert(wirecut(['R', 'B', 'U'], False) == 3)
assert(wirecut(['R', 'B', 'Y'], False) == 3)
assert(wirecut(['R', 'U', 'B'], False) == 3)
assert(wirecut(['R', 'R', 'U'], False) == 3)
assert(wirecut(['R', 'W', 'U'], True) == 3)
assert(wirecut(['W', 'B', 'W'], False) == 2)
assert(wirecut(['W', 'B', 'Y'], True) == 2)
assert(wirecut(['W', 'R', 'U'], True) == 3)
assert(wirecut(['W', 'W', 'B'], True) == 2)
assert(wirecut(['W', 'W', 'U'], True) == 2)
assert(wirecut(['W', 'Y', 'W'], True) == 2)
assert(wirecut(['Y', 'U', 'B'], True) == 2)
assert(wirecut(['Y', 'U', 'W'], False) == 2)
assert(wirecut(['Y', 'R', 'U'], False) == 3)
assert(wirecut(['Y', 'Y', 'B'], False) == 2)
assert(wirecut(['Y', 'Y', 'B'], True) == 2)
assert(wirecut(['B', 'B', 'U', 'U'], True) == 2)
assert(wirecut(['B', 'B', 'R', 'W'], True) == 2)
assert(wirecut(['B', 'B', 'R', 'Y'], True) == 2)
assert(wirecut(['B', 'U', 'B', 'R'], False) == 1)
assert(wirecut(['B', 'U', 'R', 'W'], False) == 1)
assert(wirecut(['B', 'U', 'W', 'R'], True) == 1)
assert(wirecut(['B', 'U', 'W', 'Y'], True) == 1)
assert(wirecut(['B', 'U', 'Y', 'R'], False) == 1)
assert(wirecut(['B', 'R', 'U', 'B'], True) == 1)
assert(wirecut(['B', 'R', 'R', 'B'], True) == 3)
assert(wirecut(['B', 'R', 'Y', 'W'], True) == 2)
assert(wirecut(['B', 'R', 'Y', 'Y'], True) == 4)
assert(wirecut(['B', 'W', 'R', 'U'], True) == 1)
assert(wirecut(['B', 'W', 'Y', 'B'], False) == 2)
assert(wirecut(['B', 'Y', 'R', 'U'], False) == 1)
assert(wirecut(['B', 'Y', 'R', 'R'], False) == 2)
assert(wirecut(['U', 'B', 'R', 'W'], False) == 1)
assert(wirecut(['U', 'B', 'W', 'Y'], False) == 1)
assert(wirecut(['U', 'B', 'Y', 'W'], True) == 1)
assert(wirecut(['U', 'U', 'R', 'W'], True) == 2)
assert(wirecut(['U', 'U', 'W', 'B'], False) == 2)
assert(wirecut(['U', 'U', 'W', 'Y'], False) == 1)
assert(wirecut(['U', 'R', 'B', 'U'], False) == 2)
assert(wirecut(['U', 'R', 'Y', 'U'], True) == 2)
assert(wirecut(['U', 'R', 'Y', 'W'], False) == 1)
assert(wirecut(['U', 'R', 'Y', 'Y'], False) == 1)
assert(wirecut(['U', 'W', 'U', 'Y'], False) == 1)
assert(wirecut(['U', 'W', 'W', 'W'], False) == 1)
assert(wirecut(['U', 'Y', 'B', 'B'], False) == 1)
assert(wirecut(['U', 'Y', 'B', 'W'], True) == 1)
assert(wirecut(['U', 'Y', 'U', 'R'], True) == 2)
assert(wirecut(['U', 'Y', 'R', 'W'], False) == 1)
assert(wirecut(['R', 'B', 'R', 'R'], False) == 2)
assert(wirecut(['R', 'U', 'B', 'B'], True) == 1)
assert(wirecut(['R', 'U', 'W', 'B'], False) == 1)
assert(wirecut(['R', 'R', 'B', 'R'], True) == 4)
assert(wirecut(['R', 'R', 'W', 'R'], True) == 4)
assert(wirecut(['R', 'R', 'W', 'W'], True) == 2)
assert(wirecut(['R', 'R', 'Y', 'Y'], False) == 4)
assert(wirecut(['R', 'R', 'Y', 'Y'], True) == 2)
assert(wirecut(['R', 'W', 'U', 'W'], True) == 1)
assert(wirecut(['R', 'W', 'W', 'U'], False) == 1)
assert(wirecut(['R', 'W', 'Y', 'W'], False) == 2)
assert(wirecut(['R', 'Y', 'R', 'U'], False) == 1)
assert(wirecut(['R', 'Y', 'Y', 'W'], False) == 4)
assert(wirecut(['W', 'B', 'U', 'R'], False) == 1)
assert(wirecut(['W', 'B', 'U', 'Y'], False) == 1)
assert(wirecut(['W', 'U', 'B', 'Y'], False) == 1)
assert(wirecut(['W', 'U', 'U', 'W'], True) == 2)
assert(wirecut(['W', 'U', 'R', 'W'], False) == 1)
assert(wirecut(['W', 'W', 'R', 'U'], False) == 1)
assert(wirecut(['W', 'Y', 'R', 'R'], False) == 2)
assert(wirecut(['W', 'Y', 'Y', 'U'], False) == 1)
assert(wirecut(['W', 'Y', 'Y', 'Y'], True) == 1)
assert(wirecut(['Y', 'B', 'B', 'R'], True) == 2)
assert(wirecut(['Y', 'B', 'W', 'U'], False) == 1)
assert(wirecut(['Y', 'B', 'W', 'W'], False) == 2)
assert(wirecut(['Y', 'U', 'R', 'Y'], False) == 1)
assert(wirecut(['Y', 'R', 'B', 'R'], False) == 2)
assert(wirecut(['Y', 'R', 'U', 'R'], True) == 4)
assert(wirecut(['Y', 'R', 'R', 'Y'], False) == 4)
assert(wirecut(['Y', 'R', 'W', 'U'], False) == 1)
assert(wirecut(['Y', 'R', 'Y', 'B'], False) == 4)
assert(wirecut(['Y', 'R', 'Y', 'B'], True) == 4)
assert(wirecut(['Y', 'W', 'U', 'B'], False) == 1)
assert(wirecut(['Y', 'W', 'R', 'R'], True) == 4)
assert(wirecut(['Y', 'W', 'W', 'R'], True) == 2)
assert(wirecut(['Y', 'W', 'W', 'Y'], True) == 1)
assert(wirecut(['Y', 'W', 'Y', 'U'], False) == 1)
assert(wirecut(['Y', 'Y', 'B', 'B'], True) == 4)
assert(wirecut(['Y', 'Y', 'R', 'R'], True) == 4)
assert(wirecut(['B', 'B', 'B', 'R', 'W'], False) == 1)
assert(wirecut(['B', 'B', 'R', 'R', 'W'], False) == 1)
assert(wirecut(['B', 'U', 'B', 'W', 'U'], True) == 1)
assert(wirecut(['B', 'R', 'R', 'U', 'R'], True) == 1)
assert(wirecut(['B', 'R', 'R', 'W', 'W'], False) == 1)
assert(wirecut(['B', 'R', 'Y', 'Y', 'R'], False) == 1)
assert(wirecut(['B', 'W', 'B', 'W', 'B'], False) == 1)
assert(wirecut(['B', 'W', 'U', 'B', 'U'], True) == 1)
assert(wirecut(['B', 'W', 'R', 'U', 'W'], True) == 1)
assert(wirecut(['B', 'W', 'R', 'W', 'B'], False) == 1)
assert(wirecut(['B', 'W', 'W', 'R', 'U'], False) == 1)
assert(wirecut(['B', 'W', 'W', 'R', 'U'], True) == 1)
assert(wirecut(['B', 'W', 'W', 'W', 'B'], False) == 1)
assert(wirecut(['B', 'W', 'Y', 'R', 'Y'], True) == 1)
assert(wirecut(['B', 'Y', 'B', 'W', 'U'], True) == 1)
assert(wirecut(['B', 'Y', 'U', 'W', 'B'], True) == 4)
assert(wirecut(['B', 'Y', 'U', 'Y', 'W'], False) == 1)
assert(wirecut(['U', 'B', 'R', 'W', 'Y'], False) == 1)
assert(wirecut(['U', 'B', 'W', 'B', 'R'], False) == 1)
assert(wirecut(['U', 'B', 'W', 'B', 'W'], False) == 1)
assert(wirecut(['U', 'B', 'W', 'Y', 'R'], False) == 1)
assert(wirecut(['U', 'B', 'Y', 'U', 'B'], True) == 4)
assert(wirecut(['U', 'B', 'Y', 'U', 'Y'], False) == 1)
assert(wirecut(['U', 'B', 'Y', 'R', 'W'], False) == 1)
assert(wirecut(['U', 'U', 'B', 'B', 'U'], True) == 1)
assert(wirecut(['U', 'U', 'R', 'U', 'W'], True) == 2)
assert(wirecut(['U', 'U', 'Y', 'U', 'R'], True) == 2)
assert(wirecut(['U', 'U', 'Y', 'U', 'W'], False) == 2)
assert(wirecut(['U', 'R', 'B', 'Y', 'Y'], False) == 1)
assert(wirecut(['U', 'R', 'U', 'B', 'Y'], False) == 1)
assert(wirecut(['U', 'R', 'W', 'W', 'B'], False) == 1)
assert(wirecut(['U', 'R', 'Y', 'Y', 'W'], False) == 1)
assert(wirecut(['U', 'W', 'B', 'U', 'B'], True) == 4)
assert(wirecut(['U', 'W', 'U', 'U', 'B'], True) == 4)
assert(wirecut(['U', 'W', 'R', 'U', 'Y'], True) == 2)
assert(wirecut(['U', 'W', 'R', 'R', 'R'], True) == 2)
assert(wirecut(['U', 'W', 'R', 'R', 'W'], False) == 2)
assert(wirecut(['U', 'W', 'R', 'Y', 'W'], True) == 2)
assert(wirecut(['U', 'W', 'W', 'Y', 'R'], True) == 2)
assert(wirecut(['U', 'Y', 'B', 'W', 'Y'], False) == 1)
assert(wirecut(['U', 'Y', 'U', 'R', 'W'], True) == 2)
assert(wirecut(['U', 'Y', 'R', 'R', 'U'], False) == 2)
assert(wirecut(['U', 'Y', 'Y', 'B', 'W'], False) == 1)
assert(wirecut(['U', 'Y', 'Y', 'R', 'B'], True) == 4)
assert(wirecut(['U', 'Y', 'Y', 'Y', 'R'], False) == 1)
assert(wirecut(['R', 'B', 'B', 'W', 'U'], False) == 1)
assert(wirecut(['R', 'B', 'U', 'B', 'Y'], False) == 1)
assert(wirecut(['R', 'B', 'R', 'R', 'Y'], True) == 1)
assert(wirecut(['R', 'B', 'W', 'W', 'R'], True) == 1)
assert(wirecut(['R', 'B', 'W', 'W', 'W'], False) == 1)
assert(wirecut(['R', 'U', 'U', 'B', 'U'], True) == 1)
assert(wirecut(['R', 'U', 'U', 'R', 'Y'], False) == 2)
assert(wirecut(['R', 'U', 'R', 'B', 'W'], False) == 1)
assert(wirecut(['R', 'U', 'R', 'Y', 'R'], True) == 2)
assert(wirecut(['R', 'R', 'B', 'U', 'U'], True) == 1)
assert(wirecut(['R', 'R', 'B', 'R', 'W'], True) == 1)
assert(wirecut(['R', 'R', 'W', 'B', 'Y'], True) == 1)
assert(wirecut(['R', 'R', 'Y', 'Y', 'B'], False) == 1)
assert(wirecut(['R', 'W', 'U', 'Y', 'W'], False) == 2)
assert(wirecut(['R', 'W', 'Y', 'B', 'U'], True) == 1)
assert(wirecut(['R', 'Y', 'B', 'U', 'U'], True) == 1)
assert(wirecut(['R', 'Y', 'B', 'R', 'Y'], True) == 1)
assert(wirecut(['R', 'Y', 'B', 'W', 'R'], True) == 1)
assert(wirecut(['R', 'Y', 'R', 'U', 'U'], False) == 2)
assert(wirecut(['R', 'Y', 'Y', 'W', 'B'], True) == 4)
assert(wirecut(['R', 'Y', 'Y', 'W', 'W'], True) == 1)
assert(wirecut(['W', 'B', 'R', 'R', 'R'], False) == 1)
assert(wirecut(['W', 'U', 'U', 'U', 'B'], False) == 1)
assert(wirecut(['W', 'U', 'U', 'R', 'B'], False) == 1)
assert(wirecut(['W', 'U', 'R', 'B', 'R'], False) == 1)
assert(wirecut(['W', 'U', 'W', 'W', 'R'], True) == 2)
assert(wirecut(['W', 'U', 'Y', 'R', 'W'], True) == 2)
assert(wirecut(['W', 'R', 'R', 'B', 'Y'], True) == 1)
assert(wirecut(['W', 'W', 'U', 'B', 'W'], True) == 1)
assert(wirecut(['W', 'W', 'U', 'W', 'R'], False) == 2)
assert(wirecut(['W', 'W', 'W', 'W', 'B'], False) == 1)
assert(wirecut(['W', 'W', 'W', 'W', 'W'], False) == 2)
assert(wirecut(['W', 'W', 'Y', 'W', 'U'], True) == 2)
assert(wirecut(['W', 'W', 'Y', 'Y', 'R'], False) == 1)
assert(wirecut(['W', 'Y', 'R', 'B', 'B'], False) == 1)
assert(wirecut(['W', 'Y', 'W', 'B', 'W'], True) == 1)
assert(wirecut(['W', 'Y', 'Y', 'W', 'U'], True) == 2)
assert(wirecut(['Y', 'B', 'U', 'R', 'B'], True) == 4)
assert(wirecut(['Y', 'B', 'U', 'Y', 'R'], False) == 1)
assert(wirecut(['Y', 'B', 'R', 'Y', 'Y'], False) == 1)
assert(wirecut(['Y', 'B', 'W', 'U', 'B'], True) == 4)
assert(wirecut(['Y', 'B', 'Y', 'R', 'R'], False) == 1)
assert(wirecut(['Y', 'U', 'U', 'U', 'U'], False) == 2)
assert(wirecut(['Y', 'U', 'R', 'W', 'B'], False) == 1)
assert(wirecut(['Y', 'U', 'W', 'U', 'Y'], True) == 2)
assert(wirecut(['Y', 'U', 'Y', 'Y', 'W'], False) == 2)
assert(wirecut(['Y', 'R', 'R', 'R', 'Y'], False) == 2)
assert(wirecut(['Y', 'R', 'R', 'Y', 'R'], False) == 2)
assert(wirecut(['Y', 'R', 'W', 'W', 'U'], False) == 2)
assert(wirecut(['Y', 'W', 'B', 'R', 'U'], True) == 1)
assert(wirecut(['Y', 'W', 'U', 'U', 'W'], True) == 2)
assert(wirecut(['Y', 'W', 'U', 'R', 'B'], False) == 1)
assert(wirecut(['Y', 'W', 'R', 'R', 'R'], True) == 2)
assert(wirecut(['Y', 'W', 'R', 'Y', 'R'], False) == 2)
assert(wirecut(['Y', 'W', 'W', 'B', 'U'], True) == 1)
assert(wirecut(['Y', 'W', 'W', 'W', 'B'], False) == 1)
assert(wirecut(['Y', 'Y', 'R', 'Y', 'U'], False) == 1)
assert(wirecut(['B', 'B', 'B', 'B', 'R', 'U'], False) == 4)
assert(wirecut(['B', 'B', 'B', 'R', 'R', 'R'], True) == 3)
assert(wirecut(['B', 'B', 'R', 'U', 'W', 'Y'], False) == 4)
assert(wirecut(['B', 'B', 'R', 'R', 'R', 'B'], True) == 3)
assert(wirecut(['B', 'B', 'W', 'U', 'B', 'B'], False) == 6)
assert(wirecut(['B', 'B', 'W', 'U', 'B', 'U'], True) == 3)
assert(wirecut(['B', 'B', 'W', 'W', 'B', 'R'], True) == 3)
assert(wirecut(['B', 'B', 'Y', 'Y', 'W', 'R'], False) == 4)
assert(wirecut(['B', 'U', 'B', 'B', 'W', 'U'], False) == 6)
assert(wirecut(['B', 'U', 'U', 'W', 'W', 'Y'], True) == 4)
assert(wirecut(['B', 'U', 'U', 'Y', 'Y', 'R'], False) == 4)
assert(wirecut(['B', 'U', 'R', 'R', 'B', 'Y'], True) == 4)
assert(wirecut(['B', 'U', 'W', 'B', 'W', 'Y'], True) == 4)
assert(wirecut(['B', 'U', 'Y', 'R', 'R', 'R'], False) == 4)
assert(wirecut(['B', 'U', 'Y', 'R', 'Y', 'B'], False) == 4)
assert(wirecut(['B', 'R', 'U', 'B', 'U', 'B'], True) == 3)
assert(wirecut(['B', 'R', 'R', 'R', 'Y', 'B'], True) == 4)
assert(wirecut(['B', 'R', 'R', 'W', 'B', 'R'], True) == 3)
assert(wirecut(['B', 'R', 'Y', 'B', 'R', 'W'], False) == 4)
assert(wirecut(['B', 'R', 'Y', 'W', 'B', 'Y'], False) == 4)
assert(wirecut(['B', 'W', 'U', 'Y', 'U', 'W'], False) == 4)
assert(wirecut(['B', 'W', 'R', 'U', 'Y', 'Y'], True) == 4)
assert(wirecut(['B', 'W', 'R', 'Y', 'U', 'W'], False) == 4)
assert(wirecut(['B', 'W', 'W', 'Y', 'U', 'R'], False) == 4)
assert(wirecut(['B', 'W', 'Y', 'R', 'B', 'R'], False) == 4)
assert(wirecut(['B', 'W', 'Y', 'W', 'Y', 'U'], False) == 6)
assert(wirecut(['B', 'Y', 'B', 'R', 'B', 'R'], True) == 4)
assert(wirecut(['B', 'Y', 'U', 'B', 'Y', 'U'], False) == 6)
assert(wirecut(['B', 'Y', 'R', 'U', 'Y', 'U'], True) == 4)
assert(wirecut(['B', 'Y', 'R', 'R', 'W', 'W'], True) == 4)
assert(wirecut(['B', 'Y', 'W', 'W', 'U', 'B'], True) == 4)
assert(wirecut(['U', 'B', 'B', 'W', 'R', 'R'], True) == 3)
assert(wirecut(['U', 'B', 'W', 'B', 'W', 'U'], False) == 6)
assert(wirecut(['U', 'B', 'Y', 'U', 'B', 'R'], False) == 4)
assert(wirecut(['U', 'U', 'B', 'B', 'W', 'Y'], False) == 6)
assert(wirecut(['U', 'U', 'B', 'W', 'B', 'B'], True) == 3)
assert(wirecut(['U', 'U', 'B', 'Y', 'Y', 'Y'], False) == 6)
assert(wirecut(['U', 'U', 'U', 'B', 'U', 'Y'], True) == 6)
assert(wirecut(['U', 'U', 'U', 'B', 'Y', 'Y'], False) == 6)
assert(wirecut(['U', 'U', 'U', 'Y', 'W', 'B'], False) == 6)
assert(wirecut(['U', 'U', 'R', 'U', 'W', 'R'], True) == 3)
assert(wirecut(['U', 'U', 'Y', 'W', 'W', 'U'], True) == 4)
assert(wirecut(['U', 'U', 'Y', 'Y', 'B', 'R'], False) == 4)
assert(wirecut(['U', 'R', 'B', 'R', 'Y', 'R'], False) == 4)
assert(wirecut(['U', 'R', 'B', 'R', 'Y', 'Y'], True) == 4)
assert(wirecut(['U', 'R', 'R', 'B', 'U', 'R'], False) == 4)
assert(wirecut(['U', 'R', 'W', 'B', 'B', 'B'], False) == 4)
assert(wirecut(['U', 'R', 'W', 'Y', 'U', 'U'], True) == 4)
assert(wirecut(['U', 'R', 'Y', 'U', 'B', 'Y'], True) == 4)
assert(wirecut(['U', 'W', 'B', 'B', 'B', 'U'], False) == 6)
assert(wirecut(['U', 'W', 'B', 'R', 'W', 'Y'], True) == 4)
assert(wirecut(['U', 'W', 'R', 'R', 'B', 'R'], True) == 3)
assert(wirecut(['U', 'W', 'R', 'W', 'Y', 'B'], True) == 4)
assert(wirecut(['U', 'W', 'W', 'B', 'Y', 'R'], True) == 4)
assert(wirecut(['U', 'W', 'W', 'W', 'R', 'W'], False) == 4)
assert(wirecut(['U', 'W', 'W', 'W', 'R', 'Y'], True) == 4)
assert(wirecut(['U', 'Y', 'B', 'Y', 'R', 'W'], False) == 4)
assert(wirecut(['U', 'Y', 'U', 'R', 'U', 'Y'], False) == 4)
assert(wirecut(['U', 'Y', 'U', 'R', 'Y', 'W'], False) == 4)
assert(wirecut(['U', 'Y', 'R', 'W', 'U', 'U'], False) == 4)
assert(wirecut(['U', 'Y', 'R', 'Y', 'Y', 'U'], False) == 4)
assert(wirecut(['U', 'Y', 'Y', 'B', 'W', 'Y'], True) == 6)
assert(wirecut(['U', 'Y', 'Y', 'R', 'R', 'Y'], True) == 4)
assert(wirecut(['R', 'B', 'B', 'U', 'U', 'W'], False) == 4)
assert(wirecut(['R', 'B', 'B', 'Y', 'R', 'U'], False) == 4)
assert(wirecut(['R', 'B', 'R', 'Y', 'B', 'R'], True) == 4)
assert(wirecut(['R', 'B', 'W', 'B', 'R', 'B'], False) == 4)
assert(wirecut(['R', 'B', 'W', 'W', 'U', 'U'], True) == 3)
assert(wirecut(['R', 'B', 'Y', 'R', 'Y', 'W'], False) == 4)
assert(wirecut(['R', 'U', 'B', 'B', 'B', 'W'], True) == 3)
assert(wirecut(['R', 'U', 'B', 'B', 'R', 'W'], False) == 4)
assert(wirecut(['R', 'U', 'U', 'U', 'R', 'Y'], False) == 4)
assert(wirecut(['R', 'U', 'U', 'Y', 'U', 'W'], False) == 4)
assert(wirecut(['R', 'U', 'R', 'W', 'W', 'R'], False) == 4)
assert(wirecut(['R', 'U', 'R', 'W', 'W', 'W'], False) == 4)
assert(wirecut(['R', 'U', 'R', 'Y', 'R', 'U'], False) == 4)
assert(wirecut(['R', 'U', 'W', 'U', 'Y', 'W'], False) == 4)
assert(wirecut(['R', 'U', 'W', 'W', 'Y', 'Y'], True) == 4)
assert(wirecut(['R', 'U', 'W', 'Y', 'W', 'Y'], False) == 4)
assert(wirecut(['R', 'R', 'B', 'W', 'U', 'W'], False) == 4)
assert(wirecut(['R', 'R', 'B', 'W', 'W', 'U'], True) == 3)
assert(wirecut(['R', 'R', 'U', 'B', 'B', 'U'], False) == 4)
assert(wirecut(['R', 'R', 'U', 'W', 'R', 'B'], True) == 3)
assert(wirecut(['R', 'R', 'U', 'Y', 'Y', 'R'], False) == 4)
assert(wirecut(['R', 'R', 'W', 'U', 'W', 'W'], True) == 3)
assert(wirecut(['R', 'R', 'W', 'W', 'B', 'W'], False) == 4)
assert(wirecut(['R', 'R', 'Y', 'U', 'B', 'W'], False) == 4)
assert(wirecut(['R', 'R', 'Y', 'Y', 'U', 'Y'], True) == 4)
assert(wirecut(['R', 'W', 'B', 'Y', 'R', 'B'], True) == 4)
assert(wirecut(['R', 'W', 'U', 'B', 'U', 'R'], True) == 3)
assert(wirecut(['R', 'W', 'U', 'Y', 'U', 'Y'], False) == 4)
assert(wirecut(['R', 'W', 'W', 'U', 'B', 'Y'], True) == 4)
assert(wirecut(['R', 'W', 'Y', 'B', 'W', 'Y'], False) == 4)
assert(wirecut(['R', 'W', 'Y', 'U', 'B', 'Y'], False) == 4)
assert(wirecut(['R', 'W', 'Y', 'W', 'U', 'U'], False) == 4)
assert(wirecut(['R', 'Y', 'B', 'W', 'W', 'R'], False) == 4)
assert(wirecut(['R', 'Y', 'U', 'R', 'B', 'W'], False) == 4)
assert(wirecut(['R', 'Y', 'U', 'Y', 'R', 'U'], False) == 4)
assert(wirecut(['R', 'Y', 'R', 'R', 'U', 'R'], True) == 4)
assert(wirecut(['R', 'Y', 'Y', 'B', 'U', 'R'], False) == 4)
assert(wirecut(['R', 'Y', 'Y', 'B', 'R', 'W'], False) == 4)
assert(wirecut(['R', 'Y', 'Y', 'B', 'Y', 'R'], True) == 4)
assert(wirecut(['R', 'Y', 'Y', 'Y', 'Y', 'R'], False) == 4)
assert(wirecut(['W', 'B', 'B', 'B', 'R', 'U'], True) == 3)
assert(wirecut(['W', 'B', 'B', 'R', 'Y', 'Y'], False) == 4)
assert(wirecut(['W', 'B', 'B', 'Y', 'Y', 'R'], False) == 4)
assert(wirecut(['W', 'B', 'R', 'R', 'U', 'U'], True) == 3)
assert(wirecut(['W', 'B', 'R', 'W', 'R', 'Y'], False) == 4)
assert(wirecut(['W', 'B', 'Y', 'U', 'Y', 'Y'], True) == 6)
assert(wirecut(['W', 'B', 'Y', 'R', 'R', 'U'], False) == 4)
assert(wirecut(['W', 'U', 'U', 'B', 'R', 'W'], True) == 3)
assert(wirecut(['W', 'U', 'U', 'R', 'W', 'R'], False) == 4)
assert(wirecut(['W', 'U', 'R', 'U', 'B', 'W'], True) == 3)
assert(wirecut(['W', 'U', 'R', 'U', 'U', 'Y'], True) == 4)
assert(wirecut(['W', 'U', 'R', 'U', 'R', 'W'], True) == 3)
assert(wirecut(['W', 'U', 'R', 'U', 'R', 'Y'], False) == 4)
assert(wirecut(['W', 'U', 'R', 'R', 'U', 'R'], False) == 4)
assert(wirecut(['W', 'U', 'W', 'U', 'U', 'Y'], True) == 4)
assert(wirecut(['W', 'U', 'W', 'Y', 'B', 'R'], True) == 4)
assert(wirecut(['W', 'U', 'Y', 'R', 'B', 'W'], True) == 4)
assert(wirecut(['W', 'R', 'B', 'B', 'U', 'W'], False) == 4)
assert(wirecut(['W', 'R', 'B', 'B', 'U', 'Y'], True) == 4)
assert(wirecut(['W', 'R', 'B', 'Y', 'W', 'R'], False) == 4)
assert(wirecut(['W', 'R', 'U', 'B', 'W', 'B'], True) == 3)
assert(wirecut(['W', 'R', 'U', 'Y', 'Y', 'Y'], True) == 4)
assert(wirecut(['W', 'R', 'R', 'B', 'W', 'Y'], False) == 4)
assert(wirecut(['W', 'R', 'R', 'R', 'U', 'B'], False) == 4)
assert(wirecut(['W', 'R', 'R', 'W', 'W', 'Y'], True) == 4)
assert(wirecut(['W', 'R', 'W', 'B', 'B', 'W'], True) == 3)
assert(wirecut(['W', 'R', 'Y', 'U', 'B', 'B'], True) == 4)
assert(wirecut(['W', 'R', 'Y', 'R', 'R', 'R'], True) == 4)
assert(wirecut(['W', 'W', 'B', 'R', 'R', 'Y'], True) == 4)
assert(wirecut(['W', 'W', 'B', 'Y', 'U', 'U'], True) == 4)
assert(wirecut(['W', 'W', 'U', 'W', 'R', 'U'], True) == 3)
assert(wirecut(['W', 'W', 'U', 'W', 'Y', 'B'], True) == 4)
assert(wirecut(['W', 'W', 'U', 'Y', 'Y', 'B'], True) == 6)
assert(wirecut(['W', 'W', 'R', 'R', 'R', 'W'], True) == 3)
assert(wirecut(['W', 'W', 'W', 'U', 'W', 'Y'], False) == 4)
assert(wirecut(['W', 'Y', 'R', 'B', 'W', 'U'], False) == 4)
assert(wirecut(['W', 'Y', 'R', 'W', 'U', 'W'], True) == 4)
assert(wirecut(['W', 'Y', 'R', 'Y', 'R', 'B'], True) == 4)
assert(wirecut(['W', 'Y', 'W', 'U', 'U', 'B'], True) == 4)
assert(wirecut(['W', 'Y', 'Y', 'Y', 'R', 'B'], False) == 4)
assert(wirecut(['Y', 'B', 'B', 'R', 'W', 'R'], False) == 4)
assert(wirecut(['Y', 'B', 'R', 'R', 'U', 'B'], True) == 4)
assert(wirecut(['Y', 'B', 'R', 'Y', 'W', 'R'], False) == 4)
assert(wirecut(['Y', 'B', 'W', 'Y', 'B', 'R'], True) == 4)
assert(wirecut(['Y', 'B', 'Y', 'W', 'W', 'Y'], True) == 6)
assert(wirecut(['Y', 'U', 'B', 'U', 'B', 'U'], False) == 6)
assert(wirecut(['Y', 'U', 'B', 'U', 'U', 'U'], False) == 6)
assert(wirecut(['Y', 'U', 'B', 'U', 'Y', 'Y'], False) == 6)
assert(wirecut(['Y', 'U', 'B', 'W', 'R', 'Y'], True) == 4)
assert(wirecut(['Y', 'U', 'U', 'B', 'R', 'W'], False) == 4)
assert(wirecut(['Y', 'U', 'R', 'B', 'W', 'U'], False) == 4)
assert(wirecut(['Y', 'U', 'Y', 'R', 'Y', 'Y'], True) == 4)
assert(wirecut(['Y', 'R', 'B', 'B', 'U', 'R'], False) == 4)
assert(wirecut(['Y', 'R', 'B', 'B', 'U', 'W'], True) == 4)
assert(wirecut(['Y', 'R', 'B', 'B', 'R', 'B'], False) == 4)
assert(wirecut(['Y', 'R', 'B', 'R', 'B', 'W'], False) == 4)
assert(wirecut(['Y', 'R', 'U', 'U', 'U', 'R'], False) == 4)
assert(wirecut(['Y', 'R', 'R', 'U', 'B', 'W'], True) == 4)
assert(wirecut(['Y', 'R', 'R', 'W', 'B', 'W'], True) == 4)
assert(wirecut(['Y', 'R', 'R', 'W', 'U', 'W'], False) == 4)
assert(wirecut(['Y', 'R', 'W', 'B', 'Y', 'B'], True) == 4)
assert(wirecut(['Y', 'R', 'W', 'Y', 'Y', 'R'], False) == 4)
assert(wirecut(['Y', 'R', 'Y', 'B', 'Y', 'B'], False) == 4)
assert(wirecut(['Y', 'W', 'B', 'R', 'W', 'W'], False) == 4)
assert(wirecut(['Y', 'W', 'U', 'R', 'W', 'W'], False) == 4)
assert(wirecut(['Y', 'W', 'R', 'B', 'Y', 'U'], False) == 4)
assert(wirecut(['Y', 'W', 'R', 'U', 'U', 'Y'], False) == 4)
assert(wirecut(['Y', 'W', 'R', 'R', 'W', 'B'], True) == 4)
assert(wirecut(['Y', 'W', 'W', 'U', 'Y', 'W'], True) == 6)
assert(wirecut(['Y', 'W', 'Y', 'U', 'U', 'U'], True) == 6)
assert(wirecut(['Y', 'W', 'Y', 'R', 'B', 'B'], False) == 4)
assert(wirecut(['Y', 'Y', 'B', 'B', 'B', 'B'], True) == 6)
assert(wirecut(['Y', 'Y', 'B', 'B', 'W', 'R'], True) == 4)
assert(wirecut(['Y', 'Y', 'B', 'R', 'W', 'Y'], False) == 4)
assert(wirecut(['Y', 'Y', 'B', 'Y', 'Y', 'B'], False) == 6)
assert(wirecut(['Y', 'Y', 'R', 'B', 'Y', 'W'], False) == 4)
assert(wirecut(['Y', 'Y', 'R', 'Y', 'U', 'W'], True) == 4)
