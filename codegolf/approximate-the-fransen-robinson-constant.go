/*

Given an input n, output the value of the FransÃ©n-Robinson constant with n digits after the decimal place, with rounding.

Rules
You may assume that all inputs are integers between 1 and 60.
You may not store any related values - the constant must be calculated, not recalled.
Rounding must be done with the following criteria:
If the digit following the final digit is less than five, the final digit must remain the same.
If the digit following the final digit is greater than or equal to five, the final digit must be incremented by one.
You must only output the first n+1 digits.
Standard loopholes apply.

Test Cases
>>> f(0)
3

>>> f(1)
2.8

>>> f(11)
2.80777024203

>>> f(50)
2.80777024202851936522150118655777293230808592093020

>>> f(59)
2.80777024202851936522150118655777293230808592093019829122005

>>> f(60)
2.807770242028519365221501186557772932308085920930198291220055

*/

package main

import (
	"fmt"
	"math/big"
)

func main() {
	fmt.Println(constant(0))
	fmt.Println(constant(1))
	fmt.Println(constant(11))
	fmt.Println(constant(50))
	fmt.Println(constant(59))
	fmt.Println(constant(60))
}

func constant(p int) string {
	const value = "2.8077702420285193652215011865577729323080859209301982912200548095971008891219016655101853081681966381418741643429264767860735683478308970124467424877647516675491808499327092200529900944473429520658351475152131155061828050485818763476748076712998234216343271328395538883618305810617353211154293599877046413543251439295157214826607458666636952468010477872991793284962369061528239700415720644566817607490716032269105919538991495138541458637698417639593654763228636608554597545444100599618382118296010098954046532781368346349281218580789257201387509430585351929974225321055886343356853013991840369392025909935029179966008135430102840783810802334483273590632429774855934760211566943548864787928991208958463990728851218827126179681065308807095650284087976167420365174420756726533071290689744595265909279199690675379292813623725670702107340236410076007934085777407921221226825473570823864569078346772926420488458519740775524364523376284627896617849993906967694929222536030908320851644282133264107446261899116"

	x := new(big.Float)
	x.SetPrec(uint(len(value) - 2))
	x.SetString(value)
	return x.Text('f', p)
}
