/*

The task

In this challenge, your input is a non-empty list of positive integers, given in the native format of your language.
Your output is that same list, in the same format, with some elements removed.
You shall remove every occurrence of 1, every second occurrence of 2, every third occurrence 3, and so on.
In general, for every positive integer N, you shall remove every Nth occurrence of N from the list, starting with the Nth occurrence.

Example

Consider the input list

[3,2,6,1,1,6,2,3,2,6,6,6,6,1,6,6,3,3,7,2]
First, we remove every occurrence of 1:

[3,2,6,    6,2,3,2,6,6,6,6,  6,6,3,3,7,2]
Then every second occurrence of 2:

[3,2,6,    6,  3,2,6,6,6,6,  6,6,3,3,7  ]
Then every third occurrence of 3:

[3,2,6,    6,  3,2,6,6,6,6,  6,6,  3,7  ]
The numbers 4 and 5 don't occur in the input, so they can be skipped. Next, we remove every sixth occurrence of 6:

[3,2,6,    6,  3,2,6,6,6,    6,6,  3,7  ]
There's only one occurrence of 7, so that can be skipped as well. Thus the correct output is

[3,2,6,6,3,2,6,6,6,6,6,3,7]
Rules and scoring
You can write either a full program or a function. The lowest byte count wins, and standard loopholes are disallowed.

Test cases
[1] -> []
[2] -> [2]
[1,1,1] -> []
[2,2,2] -> [2,2]
[1,1,2,2,2,3,3,3,3] -> [2,2,3,3,3]
[1,2,3,1,2,3,1,2,3,1,2,3] -> [2,3,3,2,3]
[3,2,6,1,1,6,2,3,2,6,6,6,6,1,6,6,3,3,7,2] -> [3,2,6,6,3,2,6,6,6,6,6,3,7]
[5,4,5,4,3,5,4,5,4,5,4,3,5,4,5,3,3,3,4,5,4,5,4,5,4,3,3,3,5,4] -> [5,4,5,4,3,5,4,5,4,3,5,4,5,3,3,4,5,5,4,4,3,3,5,4]
[6,4,5,8,2,9,3,1,8,5,3,5,5,6,3,5,1,2,3,9,3,5,8,7,5,9,1,3,4,8,2,3,4,7,8,5,8,5,3,1] -> [6,4,5,8,2,9,3,8,5,3,5,5,6,3,9,3,5,8,7,5,9,4,8,2,3,4,7,8,5,8,5,3]
[4,4,9,12,9,4,4,4,12,9,12,9,12,4,12,4,4,9,4,9,12,4,12,4,4,12,4,4,9,12,9,12,9,4,9,12,4,9,12,9,12,9,4,9,12,12,4,4,12,4] -> [4,4,9,12,9,4,4,12,9,12,9,12,4,12,4,9,4,9,12,4,12,4,12,4,4,9,12,9,12,4,9,12,9,9,12,9,4,9,12,12,4,4,12]
[2,2,11,11,11,11,6,2,2,6,6,2,2,2,2,6,11,6,11,11,2,11,2,6,6,11,2,11,6,2,6,6,6,6,6,11,2,11,11,6,6,6,11,6,2,6,2,6,6,2,11,2,2,11,11,11,11,2,6,2] -> [2,11,11,11,11,6,2,6,6,2,2,6,11,6,11,11,2,11,6,11,2,11,6,6,6,6,6,2,11,11,6,6,6,11,6,2,6,6,11,2,11,11,11,11,2,6]


*/

package main

import (
	"fmt"
	"reflect"
)

func main() {
	test([]int{3, 2, 6, 1, 1, 6, 2, 3, 2, 6, 6, 6, 6, 1, 6, 6, 3, 3, 7, 2}, []int{3, 2, 6, 6, 3, 2, 6, 6, 6, 6, 6, 3, 7})
	test([]int{1}, []int{})
	test([]int{1, 1, 1}, []int{})
	test([]int{2, 2, 2}, []int{2, 2})
	test([]int{1, 1, 2, 2, 2, 3, 3, 3, 3}, []int{2, 2, 3, 3, 3})
	test([]int{1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3}, []int{2, 3, 3, 2, 3})
	test([]int{3, 2, 6, 1, 1, 6, 2, 3, 2, 6, 6, 6, 6, 1, 6, 6, 3, 3, 7, 2}, []int{3, 2, 6, 6, 3, 2, 6, 6, 6, 6, 6, 3, 7})
	test([]int{5, 4, 5, 4, 3, 5, 4, 5, 4, 5, 4, 3, 5, 4, 5, 3, 3, 3, 4, 5, 4, 5, 4, 5, 4, 3, 3, 3, 5, 4}, []int{5, 4, 5, 4, 3, 5, 4, 5, 4, 3, 5, 4, 5, 3, 3, 4, 5, 5, 4, 4, 3, 3, 5, 4})
	test([]int{6, 4, 5, 8, 2, 9, 3, 1, 8, 5, 3, 5, 5, 6, 3, 5, 1, 2, 3, 9, 3, 5, 8, 7, 5, 9, 1, 3, 4, 8, 2, 3, 4, 7, 8, 5, 8, 5, 3, 1}, []int{6, 4, 5, 8, 2, 9, 3, 8, 5, 3, 5, 5, 6, 3, 9, 3, 5, 8, 7, 5, 9, 4, 8, 2, 3, 4, 7, 8, 5, 8, 5, 3})
	test([]int{4, 4, 9, 12, 9, 4, 4, 4, 12, 9, 12, 9, 12, 4, 12, 4, 4, 9, 4, 9, 12, 4, 12, 4, 4, 12, 4, 4, 9, 12, 9, 12, 9, 4, 9, 12, 4, 9, 12, 9, 12, 9, 4, 9, 12, 12, 4, 4, 12, 4}, []int{4, 4, 9, 12, 9, 4, 4, 12, 9, 12, 9, 12, 4, 12, 4, 9, 4, 9, 12, 4, 12, 4, 12, 4, 4, 9, 12, 9, 12, 4, 9, 12, 9, 9, 12, 9, 4, 9, 12, 12, 4, 4, 12})
	test([]int{2, 2, 11, 11, 11, 11, 6, 2, 2, 6, 6, 2, 2, 2, 2, 6, 11, 6, 11, 11, 2, 11, 2, 6, 6, 11, 2, 11, 6, 2, 6, 6, 6, 6, 6, 11, 2, 11, 11, 6, 6, 6, 11, 6, 2, 6, 2, 6, 6, 2, 11, 2, 2, 11, 11, 11, 11, 2, 6, 2}, []int{2, 11, 11, 11, 11, 6, 2, 6, 6, 2, 2, 6, 11, 6, 11, 11, 2, 11, 6, 11, 2, 11, 6, 6, 6, 6, 6, 2, 11, 11, 6, 6, 6, 11, 6, 2, 6, 6, 11, 2, 11, 11, 11, 11, 2, 6})
	test([]int{20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102}, []int{20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 21, 22, 100, 101, 102, 20, 22, 100, 101, 102, 20, 21, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 21, 22, 101, 102, 20, 21, 22, 100, 102, 20, 21, 22, 100, 101, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 22, 100, 101, 102, 20, 21, 100, 101, 102})
}

func assert(x bool) {
	if !x {
		panic("assertion failed")
	}
}

func test(a, r []int) {
	a = del(a)
	fmt.Println(a)
	assert(reflect.DeepEqual(a, r))
}

func del(a []int) []int {
	m := make(map[int]int)
	i := 0
	for _, v := range a {
		if m[v]++; m[v] == v {
			m[v] = 0
		} else {
			a[i], i = v, i+1
		}
	}
	return a[:i]
}
