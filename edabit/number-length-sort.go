/*

Create a sorting function which sorts numbers not by numerical order, but by number length! This means sorting numbers with the least amount of digits first, up to the numbers with the most digits.

Examples

numberLenSort([1, 54, 1, 2, 463, 2]) ➞ [1, 1, 2, 2, 54, 463]

numberLenSort([999, 421, 22, 990, 32]) ➞ [22, 32, 999, 421, 990]

numberLenSort([9, 8, 7, 6, 5, 4, 31, 2, 1, 3]) ➞ [9, 8, 7, 6, 5, 4, 2, 1, 3, 31]

Notes

If two numbers have the same number of digits, return them in the order they first appeared (this makes it different to just sorting the numbers normally).

*/

package main

import (
	"fmt"
	"reflect"
	"sort"
)

func main() {
	test([]int{1, 54, 1, 2, 463, 2}, []int{1, 1, 2, 2, 54, 463})
	test([]int{999, 421, 22, 990, 32}, []int{22, 32, 999, 421, 990})
	test([]int{9, 8, 7, 6, 5, 4, 31, 2, 1, 3}, []int{9, 8, 7, 6, 5, 4, 2, 1, 3, 31})
	test([]int{755, 1109, 9374, 94, 3683, 8695, 4135, 5177, 3216}, []int{94, 755, 1109, 9374, 3683, 8695, 4135, 5177, 3216})
	test([]int{8013, 1753, 7283, 6830, 73, 6278, 4931, 4556}, []int{73, 8013, 1753, 7283, 6830, 6278, 4931, 4556})
	test([]int{2762, 5905, 9433, 9809, 6511, 7141, 1050, 2610, 8123}, []int{2762, 5905, 9433, 9809, 6511, 7141, 1050, 2610, 8123})
	test([]int{9103, 5630, 7273, 2024}, []int{9103, 5630, 7273, 2024})
	test([]int{1342, 7567, 3504, 4378, 3070, 6592, 3645}, []int{1342, 7567, 3504, 4378, 3070, 6592, 3645})
	test([]int{237, 574, 3703, 2251, 4963, 2640}, []int{237, 574, 3703, 2251, 4963, 2640})
	test([]int{3633, 4402, 6745}, []int{3633, 4402, 6745})
	test([]int{6053, 2486, 8238}, []int{6053, 2486, 8238})
	test([]int{7919, 2725, 6296, 3517, 1788, 1321, 9049, 4481}, []int{7919, 2725, 6296, 3517, 1788, 1321, 9049, 4481})
	test([]int{1488, 764, 1053, 7053, 1718, 2950, 4697}, []int{764, 1488, 1053, 7053, 1718, 2950, 4697})
	test([]int{1321, 7671, 4235, 5989}, []int{1321, 7671, 4235, 5989})
	test([]int{3640, 4634, 9183, 6361, 7823}, []int{3640, 4634, 9183, 6361, 7823})
	test([]int{2900, 7995}, []int{2900, 7995})
	test([]int{7620, 3510}, []int{7620, 3510})
	test([]int{5533, 8639, 8297, 7591, 3280, 3354}, []int{5533, 8639, 8297, 7591, 3280, 3354})
	test([]int{9403, 9403}, []int{9403, 9403})
	test([]int{3470, 8155, 6086, 2095, 3445, 1869}, []int{3470, 8155, 6086, 2095, 3445, 1869})
	test([]int{3772, 9711, 1576, 5919, 7966, 1528}, []int{3772, 9711, 1576, 5919, 7966, 1528})
	test([]int{5751, 5472, 6910, 3678}, []int{5751, 5472, 6910, 3678})
	test([]int{7195, 9518, 9523, 7713, 6969, 739, 7313, 8588, 8545, 4414}, []int{739, 7195, 9518, 9523, 7713, 6969, 7313, 8588, 8545, 4414})
	test([]int{2209, 918, 8152, 1726, 8326, 2734}, []int{918, 2209, 8152, 1726, 8326, 2734})
	test([]int{5653, 5848, 4107, 2802, 6050, 1034, 2435, 5952}, []int{5653, 5848, 4107, 2802, 6050, 1034, 2435, 5952})
	test([]int{3587, 6762, 6215, 6995, 8731, 7989, 4913, 5251}, []int{3587, 6762, 6215, 6995, 8731, 7989, 4913, 5251})
	test([]int{6826, 5156, 8915, 4002}, []int{6826, 5156, 8915, 4002})
	test([]int{1280, 4939, 9179, 551, 9712, 6871}, []int{551, 1280, 4939, 9179, 9712, 6871})
	test([]int{8798, 8615, 1035, 4647, 8706, 7017, 9221, 6120}, []int{8798, 8615, 1035, 4647, 8706, 7017, 9221, 6120})
	test([]int{2744, 8325, 9185, 7703, 9732, 9603, 3817, 4448, 7025}, []int{2744, 8325, 9185, 7703, 9732, 9603, 3817, 4448, 7025})
	test([]int{7297, 2434, 9661, 9883, 9273}, []int{7297, 2434, 9661, 9883, 9273})
	test([]int{4950, 6059, 6961, 5026}, []int{4950, 6059, 6961, 5026})
	test([]int{7824, 187, 8454, 5269, 5576, 9835, 4142, 5154, 2682}, []int{187, 7824, 8454, 5269, 5576, 9835, 4142, 5154, 2682})
	test([]int{7168, 2449, 5870}, []int{7168, 2449, 5870})
	test([]int{4227, 2439}, []int{4227, 2439})
	test([]int{7123, 3851, 5730}, []int{7123, 3851, 5730})
	test([]int{1782}, []int{1782})
	test([]int{3940, 4334}, []int{3940, 4334})
	test([]int{9834, 9404, 1736, 2429, 500, 1446, 668, 2993, 2981, 9442}, []int{500, 668, 9834, 9404, 1736, 2429, 1446, 2993, 2981, 9442})
	test([]int{9164, 2647, 4861, 7721, 1198}, []int{9164, 2647, 4861, 7721, 1198})
	test([]int{4144, 1983}, []int{4144, 1983})
	test([]int{6562, 8367, 3499, 7010}, []int{6562, 8367, 3499, 7010})
	test([]int{8581, 2111, 9257, 4423, 3217, 9852, 2313, 4073, 2487}, []int{8581, 2111, 9257, 4423, 3217, 9852, 2313, 4073, 2487})
	test([]int{7309}, []int{7309})
	test([]int{9641, 4306, 9064}, []int{9641, 4306, 9064})
	test([]int{6245, 4677, 792, 9823, 3366}, []int{792, 6245, 4677, 9823, 3366})
	test([]int{4038, 4156}, []int{4038, 4156})
	test([]int{5429, 274, 256, 3437, 3222, 3294, 5648, 3281, 6696, 1883}, []int{274, 256, 5429, 3437, 3222, 3294, 5648, 3281, 6696, 1883})
	test([]int{6509, 6244, 4466, 7738, 1935, 9724, 6590}, []int{6509, 6244, 4466, 7738, 1935, 9724, 6590})
	test([]int{1001, 5842, 4261, 969}, []int{969, 1001, 5842, 4261})
	test([]int{7139}, []int{7139})
	test([]int{6623, 9247, 2175, 3306, 558, 6236, 9709, 643, 9737}, []int{558, 643, 6623, 9247, 2175, 3306, 6236, 9709, 9737})
	test([]int{1139, 1756, 772}, []int{772, 1139, 1756})
}

func test(a, r []int) {
	p := numsort(a)
	fmt.Println(p)
	assert(reflect.DeepEqual(p, r))
}

func assert(x bool) {
	if !x {
		panic("assertion failed")
	}
}

func numsort(a []int) []int {
	p := append([]int{}, a...)
	sort.SliceStable(p, func(i, j int) bool {
		return digits(p[i]) < digits(p[j])
	})
	return p
}

func digits(x int) int {
	c := 1
	for ; x != 0; x /= 10 {
		c++
	}
	return c
}
