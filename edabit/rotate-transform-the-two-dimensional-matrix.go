/*

Create a function to rotate a two-dimensional matrix of N * N integer elements num times, where if num is positive, the rotation is clockwise, and if not, counterclockwise.

Examples

rotate_transform([
  [2, 4],
  [0, 0]
], 1) ➞ [
  [0, 2],
  [0, 4]
]

rotate_transform([
  [2, 4],
  [0, 0]
], -1) ➞ [
  [4, 0],
  [2, 0]
]

Notes

N/A

*/

package main

import "reflect"

func main() {
	a1 := [][]int{
		{2, 4},
		{0, 0},
	}
	b1 := [][]int{
		{0, 2},
		{0, 4},
	}

	a2 := [][]int{
		{2, 4},
		{0, 0},
	}
	b2 := [][]int{
		{4, 0},
		{2, 0},
	}

	a3 := [][]int{
		{1, 4, 0, 0},
		{2, 8, 0, 0},
		{0, 0, 3, 5},
		{0, 0, 7, 1},
	}
	b3 := [][]int{
		{1, 7, 0, 0},
		{5, 3, 0, 0},
		{0, 0, 8, 2},
		{0, 0, 4, 1},
	}

	a4 := [][]int{
		{4, 3, 1, 2},
		{2, 1, 3, 4},
		{0, 0, 0, 0},
		{0, 0, 0, 0},
	}
	b4 := [][]int{
		{0, 0, 0, 0},
		{0, 0, 0, 0},
		{4, 3, 1, 2},
		{2, 1, 3, 4},
	}

	a5 := [][]int{
		{2, 3, 5, 0, 0, 0},
		{1, 7, 1, 0, 0, 0},
		{5, 3, 2, 0, 0, 0},
		{0, 0, 0, 1, 3, 4},
		{0, 0, 0, 2, 8, 2},
		{0, 0, 0, 4, 3, 1},
	}
	b5 := [][]int{
		{0, 0, 0, 5, 1, 2},
		{0, 0, 0, 3, 7, 3},
		{0, 0, 0, 2, 1, 5},
		{4, 2, 1, 0, 0, 0},
		{3, 8, 3, 0, 0, 0},
		{1, 2, 4, 0, 0, 0},
	}

	a6 := [][]int{
		{2, 3, 5, 0, 0, 0},
		{1, 7, 1, 0, 0, 0},
		{5, 3, 2, 0, 0, 0},
		{0, 0, 0, 1, 3, 4},
		{0, 0, 0, 2, 8, 2},
		{0, 0, 0, 4, 3, 1},
	}
	b6 := [][]int{
		{0, 0, 0, 4, 2, 1},
		{0, 0, 0, 3, 8, 3},
		{0, 0, 0, 1, 2, 4},
		{5, 1, 2, 0, 0, 0},
		{3, 7, 3, 0, 0, 0},
		{2, 1, 5, 0, 0, 0},
	}

	a7 := [][]int{
		{1, 1, 3, 3, 0, 0, 0, 0},
		{1, 1, 3, 3, 0, 0, 0, 0},
		{2, 2, 4, 4, 0, 0, 7, 7},
		{2, 2, 4, 4, 0, 0, 7, 7},
		{0, 0, 0, 0, 7, 7, 1, 1},
		{0, 0, 0, 0, 7, 7, 1, 1},
		{0, 0, 7, 7, 1, 1, 7, 7},
		{0, 0, 7, 7, 1, 1, 7, 7},
	}
	b7 := [][]int{
		{0, 0, 7, 7, 1, 1, 7, 7},
		{0, 0, 7, 7, 1, 1, 7, 7},
		{0, 0, 0, 0, 7, 7, 1, 1},
		{0, 0, 0, 0, 7, 7, 1, 1},
		{3, 3, 4, 4, 0, 0, 7, 7},
		{3, 3, 4, 4, 0, 0, 7, 7},
		{1, 1, 2, 2, 0, 0, 0, 0},
		{1, 1, 2, 2, 0, 0, 0, 0},
	}

	a8 := [][]int{
		{1, 1, 3, 3, 0, 0, 0, 0},
		{1, 1, 3, 3, 0, 0, 0, 0},
		{2, 2, 4, 4, 0, 0, 7, 7},
		{2, 2, 4, 4, 0, 0, 7, 7},
		{0, 0, 0, 0, 7, 7, 1, 1},
		{0, 0, 0, 0, 7, 7, 1, 1},
		{0, 0, 7, 7, 1, 1, 7, 7},
		{0, 0, 7, 7, 1, 1, 7, 7},
	}
	b8 := [][]int{
		{1, 1, 3, 3, 0, 0, 0, 0},
		{1, 1, 3, 3, 0, 0, 0, 0},
		{2, 2, 4, 4, 0, 0, 7, 7},
		{2, 2, 4, 4, 0, 0, 7, 7},
		{0, 0, 0, 0, 7, 7, 1, 1},
		{0, 0, 0, 0, 7, 7, 1, 1},
		{0, 0, 7, 7, 1, 1, 7, 7},
		{0, 0, 7, 7, 1, 1, 7, 7},
	}

	a9 := [][]int{
		{0, 0, 0, 0},
		{0, 3, 3, 0},
		{0, 3, 3, 0},
		{0, 0, 0, 0},
	}
	b9 := [][]int{
		{0, 0, 0, 0},
		{0, 3, 3, 0},
		{0, 3, 3, 0},
		{0, 0, 0, 0},
	}

	a10 := [][]int{
		{3, 7, 1, 2},
		{7, 3, 2, 1},
		{1, 2, 3, 7},
		{2, 1, 7, 3},
	}
	b10 := [][]int{
		{3, 7, 1, 2},
		{7, 3, 2, 1},
		{1, 2, 3, 7},
		{2, 1, 7, 3},
	}

	test(a1, b1, 1)
	test(a2, b2, -1)
	test(a3, b3, 2)
	test(a4, b4, -2)
	test(a5, b5, 5)
	test(a6, b6, 3)
	test(a7, b7, -5)
	test(a8, b8, 4)
	test(a9, b9, -3)
	test(a10, b10, -4)
}

func assert(x bool) {
	if !x {
		panic("assertion failed")
	}
}

func test(a, b [][]int, n int) {
	rotate(a, n)
	assert(reflect.DeepEqual(a, b))
}

func rotate(a [][]int, n int) {
	n %= 4
	if n < 0 {
		n += 4
	}
	for i := 0; i < n; i++ {
		rot90cw(a)
	}
}

func rot90cw(a [][]int) {
	n := len(a)
	for y := 0; y < n-1; y++ {
		for x := y; x < n; x++ {
			a[x][y], a[y][x] = a[y][x], a[x][y]
		}
	}

	for y := 0; y < n; y++ {
		for x := 0; x < n/2; x++ {
			a[y][x], a[y][n-x-1] = a[y][n-x-1], a[y][x]
		}
	}
}
